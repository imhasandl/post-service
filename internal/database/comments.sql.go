// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, created_at, post_id, user_id, comment_text)
VALUES (
   $1,
   NOW(),
   $2,
   $3,
   $4
) RETURNING id, created_at, post_id, user_id, comment_text
`

type CreateCommentParams struct {
	ID          uuid.UUID
	PostID      uuid.UUID
	UserID      uuid.UUID
	CommentText string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.PostID,
		arg.UserID,
		arg.CommentText,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PostID,
		&i.UserID,
		&i.CommentText,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, user_id FROM comments
WHERE id = $1
`

type GetCommentByIDRow struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetCommentByID(ctx context.Context, id uuid.UUID) (GetCommentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i GetCommentByIDRow
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}
