// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reports.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllReports = `-- name: GetAllReports :many
SELECT id, reported_at, reported_by, reason FROM reports
`

func (q *Queries) GetAllReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, getAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.ReportedAt,
			&i.ReportedBy,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reportPost = `-- name: ReportPost :one
INSERT INTO reports (id, reported_at, reported_by, reason)
VALUES (
   $1,
   NOW(),
   $2,
   $3
) RETURNING id, reported_at, reported_by, reason
`

type ReportPostParams struct {
	ID         uuid.UUID
	ReportedBy uuid.UUID
	Reason     string
}

func (q *Queries) ReportPost(ctx context.Context, arg ReportPostParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, reportPost, arg.ID, arg.ReportedBy, arg.Reason)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ReportedAt,
		&i.ReportedBy,
		&i.Reason,
	)
	return i, err
}
